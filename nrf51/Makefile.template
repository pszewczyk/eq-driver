SDK_ROOT = 
OPENOCD_CFGFILE =

# Project-specific
PROJECT_NAME = template_project
TARGET = nrf51822

# SDK-specific
TEMPLATE_PATH = $(SDK_ROOT)/components/toolchain/gcc

OUTPUT_DIRECTORY = build
LINKER_SCRIPT = ${PROJECT_NAME}.ld

# List imported from template Makefile, with some changes.
# Note, that most of the code won't compile anyway, unless module is enabled in sdk_config.h.
SRC_FILES += \
	$(SDK_ROOT)/components/libraries/log/src/nrf_log_backend_serial.c \
	$(SDK_ROOT)/components/libraries/log/src/nrf_log_frontend.c \
	$(SDK_ROOT)/components/libraries/button/app_button.c \
	$(SDK_ROOT)/components/libraries/util/app_error.c \
	$(SDK_ROOT)/components/libraries/util/app_error_weak.c \
	$(SDK_ROOT)/components/libraries/timer/app_timer.c \
	$(SDK_ROOT)/components/libraries/util/app_util_platform.c \
	$(SDK_ROOT)/components/libraries/crc16/crc16.c \
	$(SDK_ROOT)/components/libraries/fds/fds.c \
	$(SDK_ROOT)/components/libraries/fstorage/fstorage.c \
	$(SDK_ROOT)/components/libraries/hardfault/hardfault_implementation.c \
	$(SDK_ROOT)/components/libraries/util/nrf_assert.c \
	$(SDK_ROOT)/components/libraries/util/sdk_errors.c \
	$(SDK_ROOT)/components/libraries/util/sdk_mapped_flags.c \
	$(SDK_ROOT)/components/libraries/sensorsim/sensorsim.c \
	$(SDK_ROOT)/components/drivers_nrf/clock/nrf_drv_clock.c \
	$(SDK_ROOT)/components/drivers_nrf/common/nrf_drv_common.c \
	$(SDK_ROOT)/components/drivers_nrf/gpiote/nrf_drv_gpiote.c \
	$(SDK_ROOT)/components/drivers_nrf/uart/nrf_drv_uart.c \
	$(SDK_ROOT)/components/ble/common/ble_advdata.c \
	$(SDK_ROOT)/components/ble/ble_advertising/ble_advertising.c \
	$(SDK_ROOT)/components/ble/common/ble_conn_params.c \
	$(SDK_ROOT)/components/ble/common/ble_conn_state.c \
	$(SDK_ROOT)/components/ble/common/ble_srv_common.c \
	$(SDK_ROOT)/components/ble/peer_manager/gatt_cache_manager.c \
	$(SDK_ROOT)/components/ble/peer_manager/gatts_cache_manager.c \
	$(SDK_ROOT)/components/ble/peer_manager/id_manager.c \
	$(SDK_ROOT)/components/ble/peer_manager/peer_data.c \
	$(SDK_ROOT)/components/ble/peer_manager/peer_data_storage.c \
	$(SDK_ROOT)/components/ble/peer_manager/peer_database.c \
	$(SDK_ROOT)/components/ble/peer_manager/peer_id.c \
	$(SDK_ROOT)/components/ble/peer_manager/peer_manager.c \
	$(SDK_ROOT)/components/ble/peer_manager/pm_buffer.c \
	$(SDK_ROOT)/components/ble/peer_manager/pm_mutex.c \
	$(SDK_ROOT)/components/ble/peer_manager/security_dispatcher.c \
	$(SDK_ROOT)/components/ble/peer_manager/security_manager.c \
	$(SDK_ROOT)/components/toolchain/gcc/gcc_startup_nrf51.S \
	$(SDK_ROOT)/components/toolchain/system_nrf51.c \
	$(SDK_ROOT)/components/softdevice/common/softdevice_handler/softdevice_handler.c \
	$(SDK_ROOT)/components/boards/boards.c \
	${SDK_ROOT}/components/libraries/bsp/bsp.c \
	${SDK_ROOT}/components/libraries/uart/app_uart.c \
	${SDK_ROOT}/components/serialization/common/ser_dbg_sd_str.c \
	eq_ble.c \
	main.c

INC_FOLDERS += \
	${SDK_ROOT}/components/device/ \
	${SDK_ROOT}/components/toolchain/ \
	${SDK_ROOT}/components/drivers_nrf/hal/ \
	${SDK_ROOT}/components/drivers_nrf/delay \
	$(SDK_ROOT)/components/drivers_nrf/clock \
	$(SDK_ROOT)/components/drivers_nrf/common \
	$(SDK_ROOT)/components/drivers_nrf/uart \
	$(SDK_ROOT)/components/drivers_nrf/gpiote \
	${SDK_ROOT}/components/libraries/util/ \
	${SDK_ROOT}/components/libraries/timer/ \
	${SDK_ROOT}/components/softdevice/s130/headers/ \
	${SDK_ROOT}/components/softdevice/common/softdevice_handler/ \
	${SDK_ROOT}/components/toolchain/cmsis/include \
	${SDK_ROOT}/components/libraries/log/ \
	${SDK_ROOT}/components/libraries/log/src/ \
	${SDK_ROOT}/components/libraries/fstorage/ \
	${SDK_ROOT}/components/libraries/button/ \
	${SDK_ROOT}/components/libraries/experimental_section_vars \
	$(SDK_ROOT)/components/libraries/fds \
	$(SDK_ROOT)/components/ble/peer_manager \
	${SDK_ROOT}/components/ble/common/ \
	${SDK_ROOT}/components/ble/ble_advertising/ \
	${SDK_ROOT}/components/ble/ble_advertising/ \
	$(SDK_ROOT)/components/boards \
	$(SDK_ROOT)/components/libraries/bsp \
	$(SDK_ROOT)/components/libraries/uart \
	$(SDK_ROOT)/components/serialization/common \
	./config

CFLAGS += -DS130
CFLAGS += -DSOFTDEVICE_PRESENT
CFLAGS += -DNRF51
CFLAGS += -DS130
CFLAGS += -DBLE_STACK_SUPPORT_REQD
CFLAGS += -DSWI_DISABLE0
CFLAGS += -DBSP_DEFINES_ONLY
CFLAGS += -DNRF51822
CFLAGS += -DNRF_SD_BLE_API_VERSION=2
CFLAGS += -DBOARD_CUSTOM
CFLAGS += -mcpu=cortex-m0
CFLAGS += -mthumb -mabi=aapcs
CFLAGS +=  -Wall -Werror -O3 -g3
CFLAGS += -mfloat-abi=soft
# keep every function in separate section, this allows linker to discard unused ones
CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
CFLAGS += -fno-builtin --short-enums 

LDFLAGS += -mthumb -mabi=aapcs -L $(TEMPLATE_PATH) -T $(LINKER_SCRIPT)
LDFLAGS += -mcpu=cortex-m0
LDFLAGS += -Wl,--gc-sections # Remove unused sections
LDFLAGS += --specs=nano.specs -lc -lnosys

ASMFLAGS += -x assembler-with-cpp
ASMFLAGS += -DSOFTDEVICE_PRESENT
ASMFLAGS += -DNRF51
ASMFLAGS += -DS130
ASMFLAGS += -DBLE_STACK_SUPPORT_REQD
ASMFLAGS += -DSWI_DISABLE0
ASMFLAGS += -DBSP_DEFINES_ONLY
ASMFLAGS += -DNRF51822
ASMFLAGS += -DNRF_SD_BLE_API_VERSION=2

default: ${TARGET}

# Flash using openocd
flash: ${OUTPUT_DIRECTORY}/${TARGET}.hex
	@echo Flashing ${TARGET} using openocd
	sudo openocd -f ${OPENOCD_CFGFILE} -c "program ${OUTPUT_DIRECTORY}/${TARGET}.hex verify reset exit"

include $(TEMPLATE_PATH)/Makefile.common

# Macro from sdk
$(call define_target, $(TARGET))
